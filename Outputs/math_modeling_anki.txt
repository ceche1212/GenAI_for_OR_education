What is the typical structure of integer variables \( x_i \) in subset selection problems? | In subset selection problems, integer variables \( x_i \) are typically binary (0 or 1). The formulation is: \( x_i = \begin{cases} 1 & \text{if element } i \text{ is selected} \\ 0 & \text{otherwise} \end{cases} \)
How is the general knapsack problem formulated as an integer program? | The knapsack problem is formulated as: <br> Maximize: \( \sum_{i=1}^{n} c_i x_i \) (total value) <br> Subject to: \( \sum_{i=1}^{n} a_i x_i \le b \) (total weight/cost is within capacity) <br> where \( x_i \in \{0,1\} \), \( c_i \) is the value of item i, \( a_i \) is the weight of item i, and \( b \) is the knapsack's capacity.
What is the key difference between a set packing problem and a set covering problem? | A **set packing problem** aims to select a maximum cost subcollection of sets where no two sets share a common element. <br> A **set covering problem** aims to select a minimum cost subcollection of sets so that every element in the ground set is included in at least one of the selected sets.
How do you formulate a **set packing problem** in integer programming? | Maximize: \( \sum_{j=1}^{n} c_j x_j \) <br> Subject to: \( \sum_{j=1}^{n} a_{ij} x_j \le 1 \) for each element \( i \). <br> where \( x_j \in \{0,1\} \). The constraint ensures that for each element \( i \), at most one selected set \( S_j \) contains it.
How do you formulate a **set covering problem** in integer programming? | Minimize: \( \sum_{j=1}^{n} c_j x_j \) <br> Subject to: \( \sum_{j=1}^{n} a_{ij} x_j \ge 1 \) for each element \( i \). <br> where \( x_j \in \{0,1\} \). The constraint ensures that for each element \( i \), at least one selected set \( S_j \) contains it.
How can you use integer programming to constrain a variable \( x \) to be **odd**? | By introducing a new integer variable \( w \ge 0 \), you can write the constraint as: \( x - 2w = 1 \).
How can you use integer programming to constrain a variable \( x \) to be **even**? | By introducing a new integer variable \( w \ge 0 \), you can write the constraint as: \( x - 2w = 0 \).
How can you use integer programming to model the congruence relation \( x \equiv a \pmod{b} \)? | By introducing a new integer variable \( w \), the constraint can be written as: \( x - bw = a \).
How do you model the logical constraint: "If item \(i\) is selected (\(x_i=1\)), then item \(j\) is also selected (\(x_j=1\))"? | The constraint can be written as \( x_i - x_j \le 0 \). If \( x_i=1 \), then \( 1 - x_j \le 0 \), which forces \( x_j \) to be 1. If \( x_i=0 \), the constraint \( -x_j \le 0 \) is always satisfied for \( x_j=0 \) or \( x_j=1 \).
How do you model the logical constraint: "Either item \(i\) is selected or item \(j\) is selected, but not both"? | The constraint is formulated as an equality: \( x_i + x_j = 1 \). This ensures exactly one of the two binary variables is equal to 1.
How do you model the logical constraint: "If item \(i\) is selected, then item \(j\) is not selected"? | The constraint is written as \( x_i + x_j \le 1 \). If \( x_i=1 \), this forces \( x_j=0 \). If \( x_i=0 \), \( x_j \) can be 0 or 1.
How do you model the constraint that "Exactly one of items i, j, and k are selected"? | The constraint is written as \( x_i + x_j + x_k = 1 \). Since the variables are binary, this forces exactly one of them to be 1.
How do you restrict a variable \(x\) to take on a value from a discrete set, for example, \( x \in \{4, 8, 13\} \)? | Introduce new binary variables \( w_1, w_2, w_3 \). The restriction is modeled with two equations: <br> 1. \( x = 4w_1 + 8w_2 + 13w_3 \) <br> 2. \( w_1 + w_2 + w_3 = 1 \)
What is the "big M method" in integer programming? | The "big M method" is a technique used to model logical and conditional constraints by introducing a new binary variable and a large constant, M, which is chosen to be larger than any feasible value the constraint expression could take.
How do you use the "big M method" to model the condition: \( w = 1 \) if \( \sum a_i x_i \le b \), and \( w = 0 \) otherwise? | Introduce a binary variable \(w\) and a large constant \(M\). The condition is modeled with two constraints: <br> 1. \( \sum a_i x_i \le b + M(1-w) \) <br> 2. \( \sum a_i x_i \ge b + 1 - Mw \) <br> If \( w=1 \), the first constraint is \( \sum a_i x_i \le b \) and the second is loose. If \( w=0 \), the second constraint is \( \sum a_i x_i \ge b+1 \) and the first is loose.
How do you model a fixed cost in integer programming? | A fixed cost \(F\) that is incurred only if an activity \(x\) is performed (\(x > 0\)) can be modeled by introducing a binary variable \(w\). <br> The cost is added to the objective function as \( F \cdot w \). A "big M" constraint, \( x \le Mw \), is added to link \(x\) and \(w\), forcing \(w=1\) if \(x>0\).
How can integer programming model piecewise linear functions? | For each linear segment of the function, introduce a continuous variable \( x_i \) representing the value of \( x \) within that segment and a binary variable \( w_i \) that is 1 if \( x \) is in that segment. Constraints are added to ensure that only one segment is active at a time (\( \sum w_i = 1 \)) and that each \( x_i \) is within its segment's bounds (e.g., \( L_i w_i \le x_i \le U_i w_i \)). The final function is a sum of the expressions for each segment.
What are the three main components of a linear programming model? | 1. **Decision Variables**: The quantities that can be controlled and for which optimal values are sought. <br> 2. **Objective Function**: A linear expression of the decision variables that is to be maximized or minimized (e.g., maximizing profit or minimizing cost). <br> 3. **Constraints**: A set of linear inequalities or equalities that restrict the values of the decision variables.
What is the purpose of subtour elimination constraints in the Traveling Salesman Problem (TSP) formulation? | The basic TSP constraints (each city is entered and left exactly once) can lead to solutions with multiple disconnected loops (subtours) instead of a single tour. Subtour elimination constraints, \( \sum_{i \in S, j \notin S} x_{ij} \ge 1 \), prevent this by requiring that for any proper non-empty subset of cities S, there must be at least one arc going from a city in S to a city outside of S.
What three key properties must a mathematical programming model have to be considered a Linear Program (LP)? | 1. **Linearity**: The objective function and all constraints must be linear expressions of the decision variables. <br> 2. **Divisibility**: Decision variables are allowed to take on any non-negative real values (fractions are allowed). <br> 3. **Determinism**: All coefficients in the objective function and constraints are known constants.
What is a material balance constraint, and why is it important in multi-period models? | A material balance constraint ensures that what goes into a system equals what comes out, accounting for any accumulation. In multi-period models, it typically takes the form: <br> \( \text{Stock}_{t} = \text{Stock}_{t-1} + \text{Production}_{t} - \text{Sales}_{t} \) <br> It's crucial for tracking inventory or resources over time.
How can a "minimax" objective function, such as \( \min(\max(t_1, t_2, ..., t_n)) \), be linearized? | Introduce a new variable, \(s\). The objective becomes \( \min(s) \). Then add a set of constraints \( s \ge t_i \) for all \( i=1, ..., n \). Minimizing \(s\) will force it down to the value of the maximum \( t_i \).
How can a ratio objective function, such as \( \max \frac{\sum N_j x_j}{\sum D_j x_j} \), be transformed into a linear program? | 1. Define new variables: \( d = \frac{1}{\sum D_j x_j} \) and \( y_j = x_j \cdot d \). <br> 2. The objective becomes \( \max \sum N_j y_j \). <br> 3. Add the constraint \( \sum D_j y_j = 1 \). <br> 4. Rewrite the original constraints in terms of \( y_j \) and \( d \). The original variables can be recovered by \( x_j = y_j / d \). This assumes the denominator is always positive.
How do you model the logical condition "If we do project A (\(a=1\)), then we must do project B (\(b=1\)) or project C (\(c=1\))"? | The constraint can be modeled as \( b + c \ge a \). If \( a=1 \), then \( b+c \ge 1 \), which means at least one of \(b\) or \(c\) must be 1. If \( a=0 \), the constraint is \( b+c \ge 0 \), which is always true for binary variables.
How do you model the logical condition "If we do both project B (\(b=1\)) and project C (\(c=1\)), then we must do project A (\(a=1\))"? | This can be modeled with the constraint \( a \ge b + c - 1 \). If \(b=1\) and \(c=1\), the right side is 1, forcing \(a \ge 1\). If either \(b\) or \(c\) is 0, the right side is 0 or -1, and the constraint \(a \ge 0\) or \(a \ge -1\) becomes non-restrictive.
How do you linearize the product of two binary variables, \( b_3 = b_1 \cdot b_2 \)? | This non-linear equation can be replaced by a set of three linear inequalities: <br> 1. \( b_3 \le b_1 \) <br> 2. \( b_3 \le b_2 \) <br> 3. \( b_3 \ge b_1 + b_2 - 1 \)
How can you model an "either/or" constraint, where either \( \sum a_{1j}x_j \le b_1 \) OR \( \sum a_{2j}x_j \le b_2 \) must hold? | Introduce a binary variable \(y\) and a large constant M. The two constraints are rewritten as: <br> 1. \( \sum a_{1j}x_j \le b_1 + My \) <br> 2. \( \sum a_{2j}x_j \le b_2 + M(1-y) \) <br> If \(y=0\), the first constraint becomes active and the second becomes redundant. If \(y=1\), the second is active and the first is redundant.